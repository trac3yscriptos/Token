pragma solidity ^0.4.18;

  //======================================================================
  //     MyFixedAmountToken   
  //     Symbol       : MFAT
  //     Name         : MyFixedAmountToken
  //     Total supply : 10,000,000,000.000000000000000000
  //     Decimals     : 18
  //                                                                                
  //  (c) Trac3y / TRACEinc 2018. The MIT Licence.                              
  //======================================================================

  //======================================================================
         SafeMaths
  //======================================================================

contract SafeMath {
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}

 //=======================================================================
         Owned
 //=======================================================================
	
	contract Owned {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


 // constructor sets present `owner` of contract as the sender

  function Owned() public {
    owner = msg.sender;
  }

 // only owner
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

 // Current owner transfer to new owner
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}

  //======================================================================
      ERC20
  //======================================================================
  
  contract ERC20 {
    function totalSupply() public constant returns (uint);                                              // BasicToken
    function balanceOf(address tokenOwner) public constant returns (uint balance);                     // BasicToken
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining); // BasicToken
    function transfer(address to, uint tokens) public returns (bool success);                        // BasicToken
    function approve(address spender, uint tokens) public returns (bool success);                   // StandardToken
    function transferFrom(address from, address to, uint tokens) public returns (bool success);    // StandardToken

    event Transfer(address indexed from, address indexed to, uint tokens);                       // BasicToken & StandardToken
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);           // StandardToken
}
  // =====================================================================
  // ERC20 Token, with vanity details, symbol, name and decimals with
  // initial fixed supply.
  // =====================================================================
    
contract MyFixedAmountToken is ERC20, Owned {
    using SafeMath for uint;

    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;


  // =====================================================================
  // Constructor
  // =====================================================================
    
    function FixedSupplyToken() public {
        symbol = "MFAT";                                  // Tokens initials :)
        name = "MyFixedAmountToken";                      // Name of your Token
        decimals = 18;10000000000 * 10**uint(decimals);   // 10 Billion
        balances[owner] = _totalSupply;                   
        Transfer(address(0), owner, _totalSupply);
    }
    
    // =====================================================================
    // Total supply                                            // basicToken
    // =====================================================================
    
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // =====================================================================
    // Get the token balance for Token owner                   // basicToken
    // =====================================================================
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }

    
    3##########################3#####################3##########################3
    3#####################3 Add token transaction details 3#####################3
    3##########################3#####################3##########################3

  // =====================================================================
  // Don't accept ETH
  // =====================================================================
    function () public payable {
        revert();
    }

  // =====================================================================
  // onlyOwner can transfer out any accidentally sent ERC20 tokens 
  // =====================================================================
  
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20(tokenAddress).transfer(owner, tokens);
    }
 
}
