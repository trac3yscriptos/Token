pragma solidity ^0.4.18;

  //======================================================================
  //     MyFixedAmountToken   
  //     Symbol       : MFAT
  //     Name         : MyFixedAmountToken
  //     Total supply : 10,000,000,000.000000000000000000
  //     Decimals     : 18
  //                                                                                
  //  (c) Trac3y / TRACEinc 2018. The MIT Licence.                              
  //======================================================================

  //======================================================================
  //      SafeMaths
  //======================================================================

contract SafeMath {
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}

 //=======================================================================
 //       Owned
 //=======================================================================
	
	contract Owned {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


 // constructor sets present `owner` of contract as the sender

  function Owned() public {
    owner = msg.sender;
  }

 // only owner
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

 // Current owner transfer to new owner
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}

  //======================================================================
  //   ERC20
  //======================================================================
  
  contract ERC20 {
    function totalSupply() public constant returns (uint);                                              // BasicToken
    function balanceOf(address tokenOwner) public constant returns (uint balance);                     // BasicToken
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining); // BasicToken
    function transfer(address to, uint tokens) public returns (bool success);                        // BasicToken
    function approve(address spender, uint tokens) public returns (bool success);                   // StandardToken
    function transferFrom(address from, address to, uint tokens) public returns (bool success);    // StandardToken

    event Transfer(address indexed from, address indexed to, uint tokens);                       // BasicToken & StandardToken
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);           // StandardToken
}

  // =====================================================================
  // Contract function to receive approval and execute function in one call
  // =====================================================================

  // contract ApproveAndCallFallBack {
 //     function receiveApproval(address from, uint256 tokens, address token, bytes data) public;    // this and increase/decrease ?
// }

  // =====================================================================
  // ERC20 Token, with vanity details, symbol, name and decimals with
  // initial fixed supply.
  // =====================================================================
    
contract MyFixedAmountToken is ERC20, Owned {
    using SafeMath for uint;

    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;


  // =====================================================================
  // Constructor
  // =====================================================================
    
    function FixedSupplyToken() public {
        symbol = "MFAT";                                  // Tokens initials :)
        name = "MyFixedAmountToken";                      // Name of your Token
        decimals = 18;
	_totalSupply = 10000000000 * 10**uint(decimals);   // 10 Billion
        balances[owner] = _totalSupply;                   
        Transfer(address(0), owner, _totalSupply);
    }
    
    // =====================================================================
    // Total supply                                            // basicToken
    // =====================================================================
    
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // =====================================================================
    // Get the token balance for Token owner                   // basicToken
    // =====================================================================
    
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }
    
    // =====================================================================
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // =====================================================================
    
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        Transfer(msg.sender, to, tokens);
        return true;
    }


    // =====================================================================
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // =====================================================================
    
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        return true;
    }

    // =====================================================================
    // Transfer `tokens` from the `from` account to the `to` account
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the `from` account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // =====================================================================
    
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        Transfer(from, to, tokens);
        return true;
    }

    // =====================================================================
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // =====================================================================
    
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }

  // =====================================================================
   * Increase the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * _spender The address which will spend the funds.
   * _addedValue The amount of tokens to increase the allowance by.
  // =====================================================================
  
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

 // =====================================================================
  // @dev Decrease the amount of tokens that an owner allowed to a spender.
  // approve should be called when allowed[_spender] == 0. To decrement
  // allowed value is better to use this function to avoid 2 calls (and wait until
  // the first transaction is mined)
  // _spender The address which will spend the funds.
  // _subtractedValue The amount of tokens to decrease the allowance by.
  // =====================================================================
  
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

    // =====================================================================
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // =====================================================================
   
    // function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
   //     allowed[msg.sender][spender] = tokens;
  //      Approval(msg.sender, spender, tokens);
  //      ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
 //       return true;
//    }

  // =====================================================================
  // Don't accept ETH
  // =====================================================================
  
    function () public payable {
        revert();
    }

  // =====================================================================
  // onlyOwner can transfer out any accidentally sent ERC20 tokens 
  // =====================================================================
  
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20(tokenAddress).transfer(owner, tokens);
    }
 
}
