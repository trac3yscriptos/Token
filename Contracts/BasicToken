pragma solidity ^0.4.18;

  //======================================================================
  //  BasicToken contract                                                     
  //                                                                                
  //  (c) Trac3y / TRACEinc 2018. The MIT Licence.                              
  //======================================================================


  //======================================================================
      BasicToken
  //======================================================================


import "./ERC20.sol";
import "./SafeMath.sol";

  // Basic version of StandardToken, with no allowances.

contract BasicToken is ERC20 {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  uint256 totalSupply_;

  
 // total number of tokens in existence
   function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }


  // transfer token for a specified address
  // _to The address to transfer to.
  // _value The amount to be transferred.

  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  
  // Gets the balance of the specified address.
  // _owner The address to query the the balance of.
  // return An uint256 representing the amount owned by the passed address.

  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
