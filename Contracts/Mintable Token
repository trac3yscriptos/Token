pragma solidity ^0.4.18;

  //======================================================================
  // Mintable Token                                      
  //                                                                                
  //  (c) Trac3y / TRACEinc 2018. The MIT Licence.                              
  //======================================================================
  
	//=======================================================================
        Mintable
	//=======================================================================


import "./StandardToken.sol";
import "./Owned.sol";

  //  ERC20 Token, with mintable token creation

contract MintableToken is StandardToken, Owned {
  event Mint(address indexed to, uint256 amount);
  event MintFinished();

  bool public mintingFinished = false;


  modifier canMint() {
    require(!mintingFinished);
    _;
  }

  // Function to mint tokens
  // _to The address that will receive the minted tokens.
  // _amount The amount of tokens to mint.
  // A boolean that indicates if the operation was successful.
  
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    totalSupply_ = totalSupply_.add(_amount);
    balances[_to] = balances[_to].add(_amount);
    Mint(_to, _amount);
    Transfer(address(0), _to, _amount);
    return true;
  }


  // Function to stop minting new tokens.
  // return True if the operation was successful.
 
  function finishMinting() onlyOwner canMint public returns (bool) {
    mintingFinished = true;
    MintFinished();
    return true;
  }
}
